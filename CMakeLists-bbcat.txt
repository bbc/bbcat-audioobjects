
# create a version of project name with underscores instead of dashes
string(REPLACE "-" "_" UNDERSCORE_PROJECT_NAME ${PROJECT_NAME})

# create an uppercase version the above
string(TOUPPER ${UNDERSCORE_PROJECT_NAME} UPPERCASE_PROJECT_NAME)

find_package (Git)
execute_process(
    COMMAND ${GIT_EXECUTABLE} rev-parse --abbrev-ref HEAD
	WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
    RESULT_VARIABLE RESULT
    OUTPUT_VARIABLE GITBRANCH)

string(REPLACE "\n" "" GITBRANCH ${GITBRANCH})

set(LIBRARY_VERSION "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_RELEASE}.${PROJECT_VERSION_BUILD}-${GITBRANCH}")

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake_modules")

set(_version_dir ${PROJECT_NAME}-${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR})

set(WIN32_LIB_DESTINATION "c:/local")

if(WIN32 AND CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT AND NOT CYGWIN)
	set(_bbcat_dir "bbcat")
	get_filename_component(_oneup ${CMAKE_INSTALL_PREFIX} DIRECTORY)
	if(DEFINED WIN32_LIB_DESTINATION)
		set(CMAKE_INSTALL_PREFIX ${WIN32_LIB_DESTINATION}/${_bbcat_dir} CACHE PATH
			"Install path prefix, prepended onto install directories." FORCE)
	else()
		set(CMAKE_INSTALL_PREFIX ${_oneup}/${_bbcat_dir}/ CACHE PATH
			"Install path prefix, prepended onto install directories." FORCE)
	endif()
endif()

if(WIN32 AND NOT CYGWIN)
	set(INSTALL_LIB_DIR ${_version_dir}/lib CACHE PATH "Installation directory for libraries")
	set(INSTALL_BIN_DIR ${_version_dir}/bin CACHE PATH "Installation directory for binaries")
	set(INSTALL_INCLUDE_DIR ${_version_dir}/include CACHE PATH "Installation directory for header files")
	set(INSTALL_SHARE_DIR ${_version_dir}/share CACHE PATH "Installation directory for shared files")
	set(INSTALL_CMAKE_DIR ${WIN32_LIB_DESTINATION}/cmake)
	set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${INSTALL_CMAKE_DIR})
else()
	set(INSTALL_LIB_DIR lib CACHE PATH "Installation directory for libraries")
	set(INSTALL_BIN_DIR bin CACHE PATH "Installation directory for binaries")
	set(INSTALL_INCLUDE_DIR include/${_version_dir} CACHE PATH "Installation directory for header files")
	set(INSTALL_SHARE_DIR share/${PROJECT_NAME} CACHE PATH "Installation directory for shared files")
	set(INSTALL_CMAKE_DIR lib/cmake)
endif()

# Make relative paths absolute
foreach(p LIB BIN INCLUDE SHARE CMAKE)
	set(var INSTALL_${p}_DIR)
	if(NOT IS_ABSOLUTE "${${var}}")
		set(${var} "${CMAKE_INSTALL_PREFIX}/${${var}}")
	endif()
	message("${var} is " ${${var}})
endforeach()

set(CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} ${INSTALL_CMAKE_DIR})

# TBD: Switch between GNU compiler and clang on Linux platforms
OPTION( SET_CLANG_COMPILER "Use the clang compiler on Linux platforms" OFF )

# At the moment, all include directories are relative to the source root directory.
# Therefore it suffices to set this root as the include path.
INCLUDE_DIRECTORIES( ${PROJECT_SOURCE_DIR}/src )

# Copy the executables to the binary directory
SET( EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin )

############################################################

if(MSVC)
	# enable /bigobj so Visual Studio doesn't whinge
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /bigobj")
	# stop unsafe warnings, ensure STL is exported and prevent std::min()/std::max() causing errors
	ADD_DEFINITIONS("-D_CRT_SECURE_NO_WARNINGS -D_WINSOCK_DEPRECATED_NO_WARNINGS -DEXP_STL -DNOMINMAX")
endif()

# tell code that this is a CMake build
ADD_DEFINITIONS("-DCMAKE_BUILD")

############################################################
# MacOS / Linux compiler flags

if(NOT MSVC)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Werror -Wextra -msse2")
endif()

############################################################
# Control optimisation

OPTION( BUILD_OPTIMISE "Optimisation" ON )

if(MSVC AND BUILD_OPTIMISE)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /O2")
endif()

if(NOT MSVC AND BUILD_OPTIMISE)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O2")
endif()

############################################################
# Pull C flags into C++ compile

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_C_FLAGS}")
